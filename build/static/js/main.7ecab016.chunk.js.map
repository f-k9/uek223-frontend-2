{"version":3,"sources":["config/Api.ts","config/Authorities.ts","Services/AuthorityService.ts","Services/UserService.ts","Contexts/ActiveUserContext.tsx","components/pages/LoginPage/LoginPage.tsx","Router/PrivateRoute.tsx","logo1.png","components/pages/HomePage/HomePage.tsx","components/pages/UserPage/UserTable.tsx","components/molecules/UserForm/UserForm.tsx","components/pages/UserPage/UserPage.tsx","Services/BlogPostService.ts","components/pages/BlogPostPage/BlogPostTable.tsx","Services/CategoryService.ts","components/molecules/BlogPostForm/BlogPostForm.tsx","components/pages/BlogPostPage/BlogPostPage.tsx","components/pages/HomePage/UserHomePage.tsx","components/pages/BlogPostPage/BlogPostPublicPage.tsx","components/pages/RegisterPage/RegisterPage.tsx","components/pages/BlogPostPage/BlogPostsPublicPage.tsx","components/pages/UserPage/SingleUser.tsx","components/pages/AdminPage/AdminTable.tsx","components/pages/AdminPage/AdminPage.tsx","Router/Router.tsx","App.tsx","index.tsx"],"names":["api","axios","create","baseURL","process","interceptors","request","use","token","localStorage","getItem","headers","Authorization","error","Promise","reject","response","authorities","authoritySet","Set","AuthorityService","initAuthoritySet","user","JSON","parse","roles","forEach","role","authority","add","name","hasAuthority","has","hasAuthorities","element","hasAnyAuthority","clearAuthorities","clear","UserService","getUser","userID","get","data","updateUser","put","id","addUser","post","then","res","getAllUsers","deleteUser","delete","USER_DATA_LOCAL_STORAGE_KEY","TOKEN_LOCAL_STORAGE_KEY","noContextProviderFound","Error","defaultContextValue","login","logout","setActiveUser","loadActiveUser","checkRole","ActiveUserContext","createContext","ActiveUserContextProvider","children","useState","storeUser","loadSavedUserData","setUser","updatedUser","setItem","stringify","resetAuthorization","email","password","console","log","authorization","useEffect","Provider","value","finally","window","location","href","roleToCheck","some","validationSchema","Yup","shape","Login","btnstyle","margin","navigate","useNavigate","useContext","Grid","Paper","elevation","style","padding","height","width","initialValues","enableReinitialize","onSubmit","values","toLowerCase","catch","status","alert","validateOnChange","isInitialValid","props","handleSubmit","TextField","label","placeholder","fullWidth","required","autoFocus","onChange","handleChange","onBlur","handleBlur","errors","type","Button","color","variant","Typography","Link","PrivateRoute","RouteComponent","activeUserContext","tokenString","replace","jwt","exp","Date","now","isLoggedIn","length","onClick","to","HomePage","outerWidth","Box","display","alignItems","justifyContent","flexDirection","src","logo","filter","className","alt","UserTable","users","setUsers","map","Card","sx","minWidth","CardContent","firstName","lastName","CardActions","size","UserForm","submitActionHandler","formik","useFormik","object","string","min","max","paddingTop","paddingRight","Boolean","touched","marginTop","marginRight","disabled","dirty","isValid","UserPage","userId","useParams","undefined","BlogPostService","getBlogPost","getAllBlogPosts","addBlogPost","blogPost","deleteBlogPostFromUser","updateBlogPostFromUser","deleteBlogPost","updateBlogPost","BlogPostTable","blopPosts","setBlogPosts","userJSON","userBlogPosts","title","text","blogPostId","CategoryService","getAllCategories","BlogPostForm","categories","setCategories","cat","find","e","FormControl","InputLabel","Select","displayEmpty","MenuItem","BlogPostPage","setBlogPost","UserHomePage","BlogPostPublicPage","blogPosts","item","Register","BlogPostsPublicPage","currentPage","setCurrentPage","sortBy","setSortBy","sortOrder","setSortOrder","startIndex","endIndex","slicedPosts","sort","a","b","slice","handleSortChange","field","maxWidth","prevPage","SingleUser","AdminTable","AdminPage","Router","path","LoginPage","DEFAULT","BLOG_MODIFY_BY_ID","BLOG_CREATE","BLOG_DELETE_BY_ID","USER_READ_BY_ID","USER_MODIFY_SELF","USER_MODIFY","App","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.7ecab016.chunk.js","sourcesContent":["import axios, { AxiosInstance } from \"axios\";\r\n\r\n/**\r\n * isDev returns a boolean if the application is running in development-mode.\r\n */\r\nconst isDev = (): boolean => !process.env.NODE_ENV || process.env.NODE_ENV === \"development\";\r\n\r\n/**\r\n * Create an Axios instance for the api.\r\n */\r\nconst createAPI = (): AxiosInstance => {\r\n  return axios.create({ baseURL: process.env.REACT_APP_BASEURL });\r\n};\r\n\r\n/**\r\n * api constant is the axios-instance used for all requests to the rest-api.\r\n */\r\nconst api: AxiosInstance = createAPI();\r\n\r\n/**\r\n * Set the Authorization header on each request equal to the token which\r\n * is stored inside the localStorage if a user is authenticated.\r\n */\r\napi.interceptors.request.use(\r\n  (request) => {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (token) {\r\n      request.headers.Authorization = token;\r\n    }\r\n    return request;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n/**\r\n * Log outgoing requests if the environment is in development-mode\r\n */\r\napi.interceptors.request.use((request) => {\r\n  if (isDev() && request.method) {\r\n    const info = `REQUEST ${request.method.toLocaleUpperCase()} ${request.url}`;\r\n    if (request.method.toLocaleLowerCase() === \"get\") {\r\n      console.debug(info);\r\n    } else {\r\n      console.debug(info, request.data);\r\n    }\r\n  }\r\n  return request;\r\n}, Promise.reject);\r\n\r\n/**\r\n * Log incoming responses if the environment is in development-mode\r\n */\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    if (isDev() && response.config && response.config.method) {\r\n      console.debug(\r\n        `RESPONSE ${response.config.method.toLocaleUpperCase()} ${response.config.url}`,\r\n        response.data\r\n      );\r\n    }\r\n    return response;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\nexport default api;\r\n","enum authorities {\r\n  DEFAULT = \"DEFAULT\",\r\n  USER_MODIFY = \"USER_MODIFY\",\r\n  USER_MODIFY_SELF = \"USER_MODIFY_SELF\",\r\n  USER_DELETE = \"USER_DELETE\",\r\n  USER_DELETE_SELF = \"USER_DELETE_SELF\",\r\n  USER_CREATE = \"USER_CREATE\",\r\n  USER_READ = \"USER_READ\",\r\n  USER_READ_BY_ID = \"USER_READ_BY_ID\",\r\n  BLOG_READ = \"BLOG_READ\",\r\n  BLOG_MODIFY = \"BLOG_MODIFY\",\r\n  BLOG_MODIFY_BY_ID = \"BLOG_MODIFY_BY_ID\",\r\n  BLOG_DELETE = \"BLOG_DELETE\",\r\n  BLOG_DELETE_BY_ID = \"BLOG_DELETE_BY_ID\",\r\n  BLOG_CREATE = \"BLOG_CREATE\"\r\n}\r\nexport default authorities;\r\n","import { Authority } from '../types/models/Authority.model';\r\nimport { Role } from '../types/models/Role.model';\r\n\r\nconst authoritySet = new Set();\r\n\r\nconst AuthorityService = {\r\n  initAuthoritySet: (\r\n    user = JSON.parse(localStorage.getItem('user') || '{}')\r\n  ) => {\r\n    const roles = user && user.roles ? user.roles : [];\r\n    roles.forEach((role: Role) => {\r\n      role.authorities.forEach((authority: Authority) => {\r\n        authoritySet.add(authority.name);\r\n        // console.log(authority.name)\r\n      });\r\n    });\r\n  },\r\n  hasAuthority: (authority: Authority) => {\r\n    AuthorityService.initAuthoritySet();\r\n    //console.log(authority.name)\r\n    return authoritySet.has(authority.name);\r\n  },\r\n  hasAuthorities: (authorities: Authority[]) => {\r\n    AuthorityService.initAuthoritySet();\r\n    for (const element of authorities) {\r\n      if (!authoritySet.has(element.name)) { // Um auf den Namen der authority zuzugreifen\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  },\r\n  hasAnyAuthority: (authorities: Authority[]) => {\r\n    for (const element of authorities) {\r\n      if (authoritySet.has(element.name)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  },\r\n  clearAuthorities: (): void => {\r\n    authoritySet.clear();\r\n  },\r\n};\r\n\r\nexport default AuthorityService;\r\n","import api from '../config/Api';\r\nimport { User } from '../types/models/User.model';\r\n\r\nconst UserService = {\r\n  getUser: async (userID: string): Promise<User> => {\r\n    const { data } = await api.get<User>(`/user/${userID}`);\r\n    return data;\r\n  },\r\n\r\n  updateUser: (user: User) => {\r\n    return api.put(`/user/${user.id}`, user);\r\n  },\r\n\r\n  addUser: (user: User) => {\r\n    return api.post('/user/registerUser', user).then((res) => {\r\n      return res.data;\r\n    });\r\n  },\r\n\r\n  getAllUsers: () => {\r\n    return api.get(`/user`);\r\n  },\r\n\r\n  deleteUser: (id: string) => {\r\n    return api.delete(`/user/${id}`);\r\n  },\r\n};\r\n\r\nexport default UserService;\r\n","import { createContext, useEffect, useState } from \"react\";\r\nimport api from \"../config/Api\";\r\nimport roles from \"../config/Roles\";\r\nimport AuthorityService from \"../Services/AuthorityService\";\r\nimport UserService from \"../Services/UserService\";\r\nimport { User } from \"../types/models/User.model\";\r\nimport { Nullable } from \"../types/Nullable\";\r\n\r\n/**\r\n * USER_DATA_LOCAL_STORAGE_KEY defines the localStorageKey in which the\r\n * activeUser gets stored.\r\n */\r\nexport const USER_DATA_LOCAL_STORAGE_KEY = \"user\";\r\nexport const TOKEN_LOCAL_STORAGE_KEY = \"token\";\r\n\r\n/**\r\n * ActiveUserContextType defines the provided values\r\n */\r\nexport type ActiveUserContextType = {\r\n  user: Nullable<User>;\r\n  login: (email: string, password: string) => Promise<boolean>;\r\n  logout: () => void;\r\n  setActiveUser: (user: User) => void;\r\n  loadActiveUser: () => void;\r\n  checkRole: (roleToCheck: keyof typeof roles) => boolean;\r\n};\r\n\r\n/**\r\n * noContextProviderFound is a method that throws an error and is used\r\n * inside the defaultContextValue\r\n */\r\nconst noContextProviderFound = () => {\r\n  throw new Error(\"No provider for the ActiveUserContext found\");\r\n};\r\n\r\n/**\r\n * defaultContextValue defines the default values for the ActiveUserContext.\r\n */\r\nconst defaultContextValue: ActiveUserContextType = {\r\n  user: null,\r\n  login: noContextProviderFound,\r\n  logout: noContextProviderFound,\r\n  setActiveUser: noContextProviderFound,\r\n  loadActiveUser: noContextProviderFound,\r\n  checkRole: noContextProviderFound,\r\n};\r\n\r\n/**\r\n * ActiveUserContext has the purpose of providing the currently active user\r\n * as well as related values, modifiers and related operations such as login\r\n * and logout.\r\n */\r\nconst ActiveUserContext =\r\n  createContext<ActiveUserContextType>(defaultContextValue);\r\nexport default ActiveUserContext;\r\n\r\n/**\r\n * Props for the ActiveUserContextProvider Component\r\n */\r\ntype ActiveUserContextProviderProps = {\r\n  children: React.ReactNode;\r\n};\r\n\r\n/**\r\n * ActiveUserContextProvider Component is used to provide the ActiveUserContext\r\n * to all child-components.\r\n * @param children consists of all the elements that are located inside the\r\n */\r\nexport const ActiveUserContextProvider = ({\r\n  children,\r\n}: ActiveUserContextProviderProps) => {\r\n  /**\r\n   * Try to load the user data that is stored inside the LocalStorage.\r\n   * If non is present, null will be returned.\r\n   */\r\n  const loadSavedUserData = (): Nullable<User> => {\r\n    const storeUser = localStorage.getItem(USER_DATA_LOCAL_STORAGE_KEY);\r\n    if (storeUser === null) return null;\r\n    return JSON.parse(storeUser);\r\n  };\r\n\r\n  // The following line defines the user state which is holding the user\r\n  // data inside this context.\r\n  const [user, setUser] = useState<Nullable<User>>(() => loadSavedUserData());\r\n  /**\r\n   * Update the user that is provided by the ActiveUserContext\r\n   * @param updatedUser\r\n   */\r\n  const setActiveUser = (updatedUser: User) => {\r\n    setUser(updatedUser);\r\n    localStorage.setItem(\r\n      USER_DATA_LOCAL_STORAGE_KEY,\r\n      JSON.stringify(updatedUser)\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Remove all user and authorization related data from the localStorage\r\n   */\r\n  const resetAuthorization = () => {\r\n    // Reset the stored data inside the AuthorityService.\r\n    AuthorityService.clearAuthorities();\r\n    // Clear all data from the localStorage.\r\n    localStorage.clear();\r\n    // Set the user, which is stored inside the context to null.\r\n    setUser(null);\r\n  };\r\n\r\n  /**\r\n   * Logout the currently active user by resetting the stored user data\r\n   * and redirecting to the LoginPage.\r\n   */\r\n  const logout = () => {\r\n    // If no token is saved inside the local storage clear the localStorage directly\r\n    if (localStorage.getItem(TOKEN_LOCAL_STORAGE_KEY) === null) {\r\n      resetAuthorization();\r\n      return;\r\n    }\r\n    // If a token is present send a logout-request and clear the localStorage afterwards\r\n    api.get(\"/logout\").finally(resetAuthorization);\r\n    //navigate to login page\r\n    window.location.href = \"/login\";\r\n  };\r\n\r\n  /**\r\n   * Login with the provided credentials. If successful the current user gets\r\n   * updated and stored inside the context. Also the JWT-Token for further\r\n   * request based authentication is stored inside the localStorage.\r\n   * @param email\r\n   * @param password\r\n   */\r\n  const login = async (email: string, password: string) => {\r\n    await api.post(\"user/login\", { email, password }).then((response: any) => {\r\n      console.log(response.headers.authorization);\r\n      localStorage.setItem(\r\n        TOKEN_LOCAL_STORAGE_KEY,\r\n        response.headers.authorization\r\n      );\r\n      setActiveUser(response.data);\r\n      return true;\r\n    });\r\n    return false;\r\n  };\r\n\r\n  /**\r\n   * Request the user data for the currently active user from the api\r\n   * and save it to the context-state.\r\n   */\r\n  const loadActiveUser = () => {\r\n    return user\r\n      ? UserService.getUser(user.id).then((res: any) => {\r\n        setActiveUser(res);\r\n      })\r\n      : null;\r\n  };\r\n\r\n  function activeUserHasRole(roleToCheck: keyof typeof roles): boolean {\r\n    return user ? user.roles.some((role) => role.name === roleToCheck) : false;\r\n  }\r\n\r\n  /**\r\n   * Try to load the user-object from the localStorage if present.\r\n   * This is done automatically on the first render of this component.\r\n   */\r\n  useEffect(() => {\r\n    const token = localStorage.getItem(TOKEN_LOCAL_STORAGE_KEY);\r\n    if (token !== null) {\r\n      loadActiveUser();\r\n    }\r\n  });\r\n\r\n  /**\r\n   * If the user state is updated and the user is not equal to null,\r\n   * the data used in the AuthorityService as well as the data stored inside\r\n   * the localStorage will be updated with the new user-data.\r\n   */\r\n  useEffect(() => {\r\n    if (user !== null) {\r\n      AuthorityService.initAuthoritySet(user);\r\n      localStorage.setItem(USER_DATA_LOCAL_STORAGE_KEY, JSON.stringify(user));\r\n    }\r\n  }, [user]);\r\n\r\n  return (\r\n    <div>\r\n      <ActiveUserContext.Provider\r\n        value={{\r\n          user,\r\n          setActiveUser,\r\n          login,\r\n          logout,\r\n          loadActiveUser,\r\n          checkRole: activeUserHasRole,\r\n        }}\r\n      >\r\n        {children}\r\n      </ActiveUserContext.Provider>\r\n    </div>\r\n  );\r\n};\r\n","import {\r\n  Paper,\r\n  Grid,\r\n  TextField,\r\n  Button,\r\n  Typography,\r\n  Link,\r\n} from '@mui/material';\r\nimport React, { useContext } from 'react';\r\n\r\nimport { Form, Formik } from 'formik';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport * as Yup from 'yup';\r\nimport ActiveUserContext from '../../../Contexts/ActiveUserContext';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  email: Yup.string(),\r\n  password: Yup.string(),\r\n});\r\n\r\nconst Login = () => {\r\n  const paperStyle = {\r\n    padding: 20,\r\n    height: '70vh',\r\n    width: 280,\r\n    margin: '20px auto',\r\n  };\r\n  const btnstyle = { margin: '8px 0' };\r\n  const navigate = useNavigate();\r\n  const { login } = useContext(ActiveUserContext);\r\n\r\n  const handleSubmit = (values: { email: string; password: string }) => {\r\n    login(values.email.toLowerCase(), values.password)\r\n      .then(() => {\r\n        console.log(values);\r\n\r\n        navigate('/home');\r\n      })\r\n      .catch((error) => {\r\n        if (\r\n          (typeof error.response !== 'undefined' &&\r\n            error.response.status === 401) ||\r\n          error.response.status === 403\r\n        ) {\r\n          alert('invalid login');\r\n        } else {\r\n          alert('login Error');\r\n        }\r\n      });\r\n  };\r\n  return (\r\n    <Grid>\r\n      <Paper elevation={10} style={paperStyle}>\r\n        <Grid>\r\n          <h2>Sign In</h2>\r\n          <p>Default login:</p>\r\n          <p>email: admin@example.com</p>\r\n          <p>pw: 1234</p>\r\n        </Grid>\r\n\r\n        <Formik\r\n          initialValues={{\r\n            email: '',\r\n            password: '',\r\n          }}\r\n          enableReinitialize\r\n          validationSchema={validationSchema}\r\n          onSubmit={handleSubmit}\r\n          validateOnChange\r\n          isInitialValid\r\n        >\r\n          {(props) => (\r\n            <Form onSubmit={props.handleSubmit}>\r\n              <TextField\r\n                label='email'\r\n                id='email'\r\n                placeholder='Enter username'\r\n                fullWidth\r\n                required\r\n                autoFocus\r\n                onChange={props.handleChange}\r\n                onBlur={props.handleBlur}\r\n                value={props.values.email}\r\n              />\r\n              {props.errors.email && (\r\n                <div id='feedback'>{props.errors.email}</div>\r\n              )}\r\n\r\n              <TextField\r\n                id='password'\r\n                label='password'\r\n                placeholder='Enter password'\r\n                type='password'\r\n                fullWidth\r\n                required\r\n                onChange={props.handleChange}\r\n                onBlur={props.handleBlur}\r\n                value={props.values.password}\r\n              />\r\n              {props.errors.password && (\r\n                <div id='feedback'>{props.errors.password}</div>\r\n              )}\r\n\r\n              <Button\r\n                type='submit'\r\n                color='primary'\r\n                variant='contained'\r\n                style={btnstyle}\r\n                fullWidth\r\n              >\r\n                Sign in\r\n              </Button>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n        {/* <Typography>\r\n          <Link href='#'>Forgot password ?</Link>\r\n        </Typography> */}\r\n        <Typography>\r\n          {' '}\r\n          Do you have no account ? <Link href='/register'>Sign Up</Link>\r\n        </Typography>\r\n      </Paper>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React, { useContext } from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport * as jwt from 'jsonwebtoken';\r\nimport ActiveUserContext from '../Contexts/ActiveUserContext';\r\nimport AuthorityService from '../Services/AuthorityService';\r\nimport { Authority } from '../types/models/Authority.model';\r\nimport { Button } from '@mui/material';\r\n\r\ninterface Props {\r\n  element: React.ReactElement;\r\n  authorities: Authority[];\r\n}\r\n\r\ntype JWTType = {\r\n  iss: string;\r\n  exp: number;\r\n};\r\n\r\nconst PrivateRoute: React.FC<Props> = ({\r\n  element: RouteComponent,\r\n  authorities,\r\n}) => {\r\n  const activeUserContext = useContext(ActiveUserContext);\r\n  /**\r\n   * isLoggedIn checks if the token, which is saved inside the localStorage,\r\n   * exists, isn't expired yet and has been issued by the correct issuer.\r\n   * If all of the above is true the user is seen as logged in.\r\n   */\r\n  const isLoggedIn = () => {\r\n    let tokenString = localStorage.getItem('token');\r\n    if (!tokenString) {\r\n      console.error('no token found');\r\n      return false;\r\n    }\r\n    tokenString = tokenString.replace('Bearer ', '');\r\n    const token: JWTType = jwt.decode(tokenString) as JWTType;\r\n    // Check if token does not exist or doesn't have an expiration claim or is expired.\r\n    if (!token || !token.exp || token.exp < Date.now() / 1000) {\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n  /**\r\n   * If the user is not logged in call activeUserContext.logout, which destroys\r\n   * all locally saved user data and redirects to /login.\r\n   */\r\n  if (!isLoggedIn()) {\r\n    activeUserContext.logout();\r\n    return <Navigate to='/login' replace={true} />;\r\n  }\r\n  /**\r\n   * Check if the active user has at least 1 of the needed authorities.\r\n   * If no authorities are needed true is returned.\r\n   */\r\n  const hasNeededAuthorities =\r\n    authorities.length === 0 || authorities.some(AuthorityService.hasAuthority);\r\n\r\n  /**\r\n   * If the user doesn't possess the needed authorities Redirect the user to\r\n   * /unauthorized\r\n   */\r\n  if (!hasNeededAuthorities) {\r\n    return <Navigate to='/unauthorized' replace={true} />;\r\n  }\r\n\r\n  // All checks passed\r\n  return (\r\n    //Pagelayout puts the Navigation, Menu etc. around the component\r\n    <div>\r\n      <Button onClick={activeUserContext.logout}>Logout</Button>\r\n      {RouteComponent}\r\n    </div>\r\n  );\r\n};\r\nexport default PrivateRoute;\r\n","export default __webpack_public_path__ + \"static/media/logo1.a04327d3.png\";","import { Box } from '@mui/system';\r\nimport logo from '../../../logo1.png'\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {Button} from \"@mui/material\";\r\n\r\nconst HomePage = () => {\r\n  const btnstyle = { margin: '8px 0', outerWidth: '34%' };\r\n  const navigate = useNavigate();\r\n\r\n  const handleClickLogin = () => {\r\n    navigate('/login');\r\n  }\r\n\r\n  const handleClickBlogs = () => {\r\n    navigate('/blogs');\r\n  }\r\n\r\n  return (\r\n    <Box\r\n      display='flex'\r\n      alignItems='center'\r\n      justifyContent='center'\r\n      flexDirection={'column'}\r\n    >\r\n      <h1>Welcome to the Homepage of OurSpace</h1>\r\n      <Button\r\n        type='submit'\r\n        color='primary'\r\n        variant='contained'\r\n        style={btnstyle}\r\n        onClick={handleClickBlogs}\r\n      >\r\n        Blogs\r\n      </Button>\r\n      <img\r\n        src={logo}\r\n        style={{ filter: 'invert(100%)' }}\r\n        className='App-logo'\r\n        alt='logo'\r\n      />\r\n      <Button\r\n        type='submit'\r\n        color='primary'\r\n        variant='contained'\r\n        style={btnstyle}\r\n        onClick={handleClickLogin}\r\n      >\r\n        Login\r\n      </Button>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default HomePage;\r\n","import Card from '@mui/material/Card';\r\nimport CardActions from '@mui/material/CardActions';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Button from '@mui/material/Button';\r\nimport { useEffect, useState } from 'react';\r\nimport { User } from '../../../types/models/User.model';\r\nimport UserService from '../../../Services/UserService';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst UserTable = () => {\r\n  const navigate = useNavigate();\r\n  const [users, setUsers] = useState<User[]>([]);\r\n\r\n  useEffect(() => {\r\n    UserService.getAllUsers().then((data) => {\r\n      setUsers(data.data);\r\n    });\r\n  }, []);\r\n\r\n  const handleAdd = () => {\r\n    navigate('../useredit/');\r\n  };\r\n\r\n  const handleEdit = (id: string) => {\r\n    navigate('../useredit/' + id);\r\n  };\r\n\r\n  const handleDelete = (id: string) => {\r\n    UserService.deleteUser(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {users.map((user) => (\r\n        <div key={user.id}>\r\n          <Card sx={{ minWidth: 275 }}>\r\n            <CardContent>\r\n              {user.firstName} {user.lastName} {user.email}\r\n              <CardActions>\r\n                <Button\r\n                  size='small'\r\n                  color='primary'\r\n                  variant='contained'\r\n                  onClick={() => handleEdit(user.id)}\r\n                >\r\n                  Edit\r\n                </Button>\r\n                <Button\r\n                  size='small'\r\n                  color='error'\r\n                  variant='contained'\r\n                  onClick={() => handleDelete(user.id)}\r\n                >\r\n                  Delete\r\n                </Button>\r\n              </CardActions>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      ))}\r\n      <Button\r\n        size='small'\r\n        color='success'\r\n        variant='contained'\r\n        onClick={handleAdd}\r\n      >\r\n        Add\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UserTable;\r\n","import { useFormik } from 'formik';\r\nimport { User } from '../../../types/models/User.model';\r\nimport { Box, Button, TextField } from '@mui/material';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { object, string } from 'yup';\r\n\r\ninterface UserProps {\r\n  user: User;\r\n  submitActionHandler: (values: User) => void;\r\n}\r\n\r\nconst UserForm = ({ user, submitActionHandler }: UserProps) => {\r\n  const navigate = useNavigate();\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      id: user.id,\r\n      lastName: user ? user.lastName : '',\r\n      firstName: user ? user.firstName : '',\r\n      email: user ? user.email : '',\r\n      roles: user ? user.roles : [],\r\n    },\r\n    validationSchema: object({\r\n      firstName: string().required().min(2).max(50),\r\n      lastName: string().required().min(2).max(50),\r\n      email: string().required().email(),\r\n    }),\r\n    onSubmit: (values: User) => {\r\n      submitActionHandler(values);\r\n    },\r\n    enableReinitialize: true,\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={formik.handleSubmit}>\r\n        <Box sx={{ paddingTop: '15px' }}>\r\n          <TextField\r\n            id='firstName'\r\n            label='Firstname'\r\n            variant='outlined'\r\n            sx={{ paddingRight: '10px' }}\r\n            onBlur={formik.handleBlur}\r\n            onChange={formik.handleChange}\r\n            error={Boolean(formik.touched.firstName && formik.errors.firstName)}\r\n            value={formik.values.firstName}\r\n          />\r\n          {formik.errors.firstName && formik.touched.firstName ? (\r\n            <div style={{ color: 'red' }}>{formik.errors.firstName}</div>\r\n          ) : null}\r\n          <TextField\r\n            id='lastName'\r\n            label='Lastname'\r\n            variant='outlined'\r\n            sx={{ paddingRight: '10px' }}\r\n            onBlur={formik.handleBlur}\r\n            onChange={formik.handleChange}\r\n            error={Boolean(formik.touched.lastName && formik.errors.lastName)}\r\n            value={formik.values.lastName}\r\n          />\r\n          {formik.errors.lastName && formik.touched.lastName ? (\r\n            <div style={{ color: 'red' }}>{formik.errors.lastName}</div>\r\n          ) : null}\r\n          <TextField\r\n            id='email'\r\n            label='E-Mail'\r\n            variant='outlined'\r\n            onBlur={formik.handleBlur}\r\n            onChange={formik.handleChange}\r\n            error={Boolean(formik.touched.email && formik.errors.email)}\r\n            value={formik.values.email}\r\n          />\r\n\r\n          {formik.errors.email && formik.touched.email ? (\r\n            <div style={{ color: 'red' }}>{formik.errors.email}</div>\r\n          ) : null}\r\n        </Box>\r\n        <div>\r\n          <Button\r\n            sx={{ marginTop: '15px', marginRight: '10px' }}\r\n            variant='contained'\r\n            color='success'\r\n            type='submit'\r\n            disabled={!(formik.dirty && formik.isValid)}\r\n          >\r\n            {user.id && 'Save'}\r\n            {!user.id && 'Add'}\r\n          </Button>\r\n          <Button\r\n            sx={{ marginTop: '15px' }}\r\n            variant='contained'\r\n            color='error'\r\n            onClick={() => {\r\n              navigate('/users');\r\n            }}\r\n          >\r\n            Cancel\r\n          </Button>\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UserForm;\r\n","import { useNavigate, useParams } from 'react-router-dom';\r\nimport { User } from '../../../types/models/User.model';\r\nimport UserService from '../../../Services/UserService';\r\nimport UserForm from '../../molecules/UserForm/UserForm';\r\nimport { useEffect, useState } from 'react';\r\n\r\nconst UserPage = () => {\r\n  const navigate = useNavigate();\r\n  const { userId } = useParams();\r\n  const [user, setUser] = useState<User>({\r\n    id: '',\r\n    firstName: '',\r\n    lastName: '',\r\n    email: '',\r\n    roles: [],\r\n  });\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (userId) {\r\n        UserService.getUser(userId).then((res) => {\r\n          return setUser(res);\r\n        });\r\n      }\r\n    };\r\n  }, [userId]);\r\n\r\n  const submitActionHandler = (values: User) => {\r\n    if (userId !== undefined) {\r\n      UserService.updateUser(values).then(() => {\r\n        navigate('../users');\r\n      });\r\n    } else {\r\n      UserService.addUser(values).then(() => {\r\n        navigate('/users');\r\n      });\r\n    }\r\n  };\r\n\r\n  return <UserForm user={user} submitActionHandler={submitActionHandler} />;\r\n};\r\nexport default UserPage;\r\n","import api from '../config/Api';\r\nimport { BlogPost } from '../types/models/BlogPost.model';\r\n\r\nconst BlogPostService = {\r\n    getBlogPost: async (id: string): Promise<BlogPost> => {\r\n        const { data } = await api.get<BlogPost>(`/blogs/${id}`);\r\n        return data;\r\n    },\r\n\r\n    getAllBlogPosts: () => {\r\n        return api.get('/blogs/');\r\n    },\r\n\r\n    addBlogPost: (blogPost: BlogPost) => {\r\n        return api.post('/blogs/', blogPost).then((res) => {\r\n            return res.data;\r\n        }).catch(error => { console.log(error + \"Can't add BlogPost\") });\r\n    },\r\n\r\n    deleteBlogPostFromUser: (id: string) => {\r\n        return api.delete(`/blogs/${id}`);\r\n    },\r\n\r\n    updateBlogPostFromUser: (blogPost: BlogPost) => {\r\n        return api.put(`/blogs/${blogPost.id}`, blogPost);\r\n    },\r\n\r\n    deleteBlogPost: (id: string) => {\r\n        return api.delete(`/blogs/${id}`);\r\n    },\r\n\r\n    updateBlogPost: (blogPost: BlogPost) => {\r\n        return api.put(`/blogs/${blogPost.id}`, blogPost);\r\n    },\r\n\r\n};\r\n\r\nexport default BlogPostService;","import React from 'react';\r\nimport { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { BlogPost } from '../../../types/models/BlogPost.model';\r\nimport BlogPostService from '../../../Services/BlogPostService';\r\nimport { CardContent } from '@mui/joy';\r\nimport { Button, Card, CardActions } from '@mui/material';\r\n\r\nconst BlogPostTable = () => {\r\n  const navigate = useNavigate();\r\n  const [blopPosts, setBlogPosts] = useState<BlogPost[]>([]);\r\n  const userJSON = localStorage.getItem('user');\r\n  const user = userJSON ? JSON.parse(userJSON) : null;\r\n\r\n  useEffect(() => {\r\n    BlogPostService.getAllBlogPosts().then((data) => {\r\n      const userBlogPosts = data.data.filter((blogPost: BlogPost) => blogPost.user.id === user.id); // Nur BlogPosts welcher der User selbst erstellt hat werden angezeigt\r\n      setBlogPosts(userBlogPosts);\r\n    }).catch(error => { console.log(error + \"Can't get BlogPosts\") });\r\n  }, [user.id]);\r\n\r\n\r\n  const handleAdd = () => {\r\n    navigate('../blogadd/');\r\n  };\r\n\r\n  const handleEdit = (blogPostId: string) => {\r\n    navigate('../blogedit/' + blogPostId);\r\n  };\r\n\r\n  const handleDelete = (blogPostId: string) => {\r\n    BlogPostService.deleteBlogPostFromUser(blogPostId);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {blopPosts.map((blogPost) => (\r\n        <div key={blogPost.id}>\r\n          <Card sx={{ minWidth: 275 }}>\r\n            <CardContent>\r\n              {blogPost.title} {blogPost.text}\r\n              <CardActions>\r\n                <Button\r\n                  size='small'\r\n                  color='primary'\r\n                  variant='contained'\r\n                  onClick={() => handleEdit(blogPost.id)}\r\n                >\r\n                  Edit\r\n                </Button>\r\n                <Button\r\n                  size='small'\r\n                  color='error'\r\n                  variant='contained'\r\n                  onClick={() => {\r\n                    handleDelete(blogPost.id)\r\n                  }}\r\n                >\r\n                  Delete\r\n                </Button>\r\n              </CardActions>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      ))}\r\n      <Button\r\n        size='small'\r\n        color='success'\r\n        variant='contained'\r\n        onClick={handleAdd}\r\n      >\r\n        Add\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BlogPostTable;\r\n","import api from '../config/Api';\r\n\r\nconst CategoryService = {\r\n    getAllCategories: () => {\r\n        return api.get('/blogs/categories/');\r\n    },\r\n};\r\n\r\nexport default CategoryService;","import { useFormik } from 'formik';\r\nimport { Box, Button, FormControl, InputLabel, MenuItem, Select, TextField } from '@mui/material';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { object, string } from 'yup';\r\nimport { BlogPost } from '../../../types/models/BlogPost.model';\r\nimport CategoryService from '../../../Services/CategoryService';\r\nimport { useState, useEffect } from 'react';\r\nimport { Category } from '../../../types/models/Category.model';\r\n\r\ninterface BlogPostProps {\r\n  blogPost: BlogPost;\r\n  submitActionHandler: (values: BlogPost) => void;\r\n}\r\n\r\nconst BlogPostForm = ({ blogPost, submitActionHandler }: BlogPostProps) => {\r\n  const [categories, setCategories] = useState<Category[]>([]);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    CategoryService.getAllCategories().then((data) => {\r\n      setCategories(data.data);\r\n    }).catch(error => { console.log(error + \"Can't get Categories\") });\r\n  }, [])\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      id: blogPost.id || '',\r\n      title: blogPost.title || '',\r\n      text: blogPost.text || '',\r\n      user: blogPost.user || { id: '', email: '', firstName: '', lastName: '', roles: [] },\r\n      categories: blogPost.categories || [],\r\n    },\r\n    validationSchema: object({\r\n      title: string().required().min(2).max(20),\r\n      text: string().required().min(2).max(100),\r\n    }),\r\n    onSubmit: (values) => {\r\n      values.user.id = JSON.parse(localStorage.getItem('user') || '').id;\r\n      let cat = categories.find((e: any) => e.id === values.categories) // Approved by Luca\r\n      submitActionHandler({ ...values, categories: cat ? [cat] : [] });\r\n    },\r\n    enableReinitialize: true,\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={formik.handleSubmit}>\r\n        <h1>Create Blog Post</h1>\r\n        <Box sx={{ paddingTop: '15px' }}>\r\n          <TextField\r\n            id='title'\r\n            label='Title'\r\n            variant='outlined'\r\n            sx={{ paddingRight: '10px' }}\r\n            onBlur={formik.handleBlur}\r\n            onChange={formik.handleChange}\r\n            error={Boolean(formik.touched.title && formik.errors.title)}\r\n            value={formik.values.title}\r\n          />\r\n          {formik.errors.title && formik.touched.title ? (\r\n            <div style={{ color: 'red' }}>{formik.errors.title}</div>\r\n          ) : null}\r\n          <TextField\r\n            id='text'\r\n            label='Text'\r\n            variant='outlined'\r\n            sx={{ paddingRight: '10px' }}\r\n            onBlur={formik.handleBlur}\r\n            onChange={formik.handleChange}\r\n            error={Boolean(formik.touched.text && formik.errors.text)}\r\n            value={formik.values.text}\r\n          />\r\n          {formik.errors.text && formik.touched.text ? (\r\n            <div style={{ color: 'red' }}>{formik.errors.text}</div>\r\n          ) : null}\r\n          <FormControl fullWidth>\r\n            <InputLabel>Choose Categorie</InputLabel>\r\n            <Select\r\n              displayEmpty\r\n              id=\"category\"\r\n              value={formik.values.categories}\r\n              onChange={formik.handleChange}\r\n              name='categories'\r\n            >\r\n              <MenuItem value={\"\"}></MenuItem>\r\n              {categories.map((cat) => (<MenuItem key={cat.id} value={cat.id}>{cat.name}</MenuItem>))}\r\n            </Select>\r\n          </FormControl>\r\n        </Box>\r\n        <div>\r\n          <Button\r\n            sx={{ marginTop: '15px', marginRight: '10px' }}\r\n            variant='contained'\r\n            color='success'\r\n            type='submit'\r\n            disabled={!(formik.dirty && formik.isValid)}\r\n          >\r\n            {blogPost.id && 'Save'}\r\n            {!blogPost.id && 'Add'}\r\n          </Button>\r\n          <Button\r\n            sx={{ marginTop: '15px' }}\r\n            variant='contained'\r\n            color='error'\r\n            onClick={() => {\r\n              navigate('/blogs');\r\n            }}\r\n          >\r\n            Cancel\r\n          </Button>\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BlogPostForm;","import React from 'react';\r\nimport { useEffect, useState } from 'react';\r\nimport { BlogPost } from '../../../types/models/BlogPost.model';\r\nimport BlogPostService from '../../../Services/BlogPostService';\r\nimport BlogPostForm from '../../molecules/BlogPostForm/BlogPostForm';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\n\r\nconst BlogPostPage = () => {\r\n  const navigate = useNavigate();\r\n  const { blogPostId } = useParams();\r\n  const [blogPost, setBlogPost] = useState<BlogPost>({\r\n    id: '',\r\n    title: '',\r\n    text: '',\r\n    user: { id: '', firstName: '', lastName: '', email: '', roles: [] },\r\n    categories: [],\r\n  });\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (blogPostId) {\r\n        BlogPostService.getBlogPost(blogPostId).then((res) => {\r\n          return setBlogPost(res);\r\n        }).catch(error => { console.log(error + \"Can't get BlogPost\") });\r\n      }\r\n    };\r\n  }, [blogPostId]);\r\n\r\n  const submitActionHandler = (values: BlogPost) => {\r\n    if (blogPostId !== undefined) {\r\n      BlogPostService.updateBlogPostFromUser(values).then(() => {\r\n        navigate('../blogs');\r\n      }).catch(error => { console.log(error + \"Can't navigate to blogs\") });\r\n    } else {\r\n      BlogPostService.addBlogPost(values).then(() => {\r\n        navigate('/blogs');\r\n      }).catch(error => { console.log(error + \"Can't navigate to blogs\") });\r\n    }\r\n  };\r\n\r\n  return <BlogPostForm blogPost={blogPost} submitActionHandler={submitActionHandler} />;\r\n\r\n};\r\n\r\nexport default BlogPostPage;\r\n","import { Box } from '@mui/system';\r\nimport logo from '../../../logo1.png'\r\nimport { Button } from '@mui/material';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst UserHomePage = () => {\r\n  const btnstyle = { margin: '8px 0', outerWidth: '34%' };\r\n  const navigate = useNavigate();\r\n  const userJSON = localStorage.getItem('user');\r\n  const user = userJSON ? JSON.parse(userJSON) : null;\r\n\r\n  const handleBlog = () => {\r\n    navigate('/dashboard/' + user.id);\r\n  }\r\n\r\n  const handleUser = () => {\r\n    navigate('/user/' + user.id);\r\n  }\r\n\r\n  return (\r\n    <Box\r\n      display='flex'\r\n      alignItems='center'\r\n      justifyContent='center'\r\n      flexDirection={'column'}\r\n    >\r\n      <h1>Welcome to the User Homepage of OurSpace</h1>\r\n      <Button\r\n        type='submit'\r\n        color='primary'\r\n        variant='contained'\r\n        style={btnstyle}\r\n        onClick={handleUser}\r\n      >\r\n        User Profile\r\n      </Button>\r\n      <img\r\n        src={logo}\r\n        style={{ filter: 'invert(100%)' }}\r\n        className='App-logo'\r\n        alt='logo'\r\n      />\r\n      <Button\r\n        type='submit'\r\n        color='primary'\r\n        variant='contained'\r\n        style={btnstyle}\r\n        onClick={handleBlog}\r\n      >\r\n        EDIT, DELETE & ADD Blog Posts\r\n      </Button>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default UserHomePage;","import React, { useEffect, useState } from 'react';\r\nimport { BlogPost } from '../../../types/models/BlogPost.model';\r\nimport BlogPostService from '../../../Services/BlogPostService';\r\nimport { useParams } from 'react-router-dom';\r\nimport {Card, Typography} from '@mui/material';\r\nimport CardContent from \"@mui/material/CardContent\";\r\n\r\nconst BlogPostPublicPage = () => {\r\n    const [blogPosts, setBlogPosts] = useState<BlogPost[]>([]);\r\n    const { blogPostId } = useParams();\r\n\r\n    useEffect(() => {\r\n        if (blogPostId) {\r\n            console.log(blogPostId)\r\n            BlogPostService.getBlogPost(blogPostId).then((data) => {\r\n                if (data) {\r\n                    setBlogPosts([data]);\r\n                }\r\n            }).catch(error => { console.log(error + \"Can't get BlogPost\") });\r\n        }\r\n    }, [blogPostId]);\r\n\r\n    return (\r\n        <>\r\n            {blogPosts.map((blogPost) => (\r\n                <div key={blogPost.id}>\r\n                    <Card sx={{ minWidth: 275 }}>\r\n                        <CardContent>\r\n                            <Typography>\r\n                                Title: {blogPost.title}\r\n                            </Typography>\r\n                            <Typography>\r\n                                Text: {blogPost.text}\r\n                            </Typography>\r\n                            <Typography>\r\n                                Category: {blogPost.categories.map(item => item.name)}\r\n                            </Typography>\r\n                            <Typography>\r\n                                By: {blogPost.user.firstName} {blogPost.user.lastName}\r\n                            </Typography>\r\n                        </CardContent>\r\n                    </Card>\r\n                </div>\r\n            ))}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BlogPostPublicPage;","import React from 'react';\r\n\r\nconst Register = () => {\r\n\r\n  return (\r\n    <div>\r\n      <h1>Create an account!</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","import React from 'react';\r\nimport { useEffect, useState } from 'react';\r\nimport { BlogPost } from '../../../types/models/BlogPost.model';\r\nimport BlogPostService from '../../../Services/BlogPostService';\r\nimport {Button, Card, Typography} from '@mui/material';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {CardContent} from \"@mui/joy\";\r\n\r\nconst BlogPostsPublicPage = () => {\r\n    const [blopPosts, setBlogPosts] = useState<BlogPost[]>([]);\r\n    const navigate = useNavigate();\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const postsPerPage= 3;\r\n    const [sortBy, setSortBy] = useState(\"createdAt\");\r\n    const [sortOrder, setSortOrder] = useState(\"asc\");\r\n\r\n    useEffect(() => {\r\n        const startIndex = (currentPage - 1) * postsPerPage;\r\n        const endIndex = startIndex + postsPerPage;\r\n        BlogPostService.getAllBlogPosts().then((data) => {\r\n            const sortedPosts = data.data.sort((a: any, b: any) => {\r\n                if (sortOrder === \"asc\") {\r\n                    return a[sortBy] < b[sortBy] ? -1 : 1;\r\n                } else {\r\n                    return a[sortBy] > b[sortBy] ? -1 : 1;\r\n                }\r\n            });\r\n\r\n            const slicedPosts = sortedPosts.slice(startIndex, endIndex);\r\n            setBlogPosts(slicedPosts);\r\n            console.log(slicedPosts);\r\n        }).catch(error => { console.log(error + \"Can't sort BlogPosts\") });\r\n    }, [currentPage, postsPerPage, sortBy, sortOrder]);\r\n\r\n    const handleSortChange = (field: string) => {\r\n        if (sortBy === field) {\r\n            setSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\r\n        } else {\r\n            setSortBy(field);\r\n            setSortOrder(\"asc\");\r\n        }\r\n    };\r\n\r\n    const nextPage = () => {\r\n        setCurrentPage((prevPage) => prevPage + 1);\r\n    };\r\n\r\n    const prevPage = () => {\r\n        setCurrentPage((prevPage) => prevPage - 1);\r\n    };\r\n\r\n\r\n\r\n    /* useEffect(() => {\r\n        BlogPostService.getAllBlogPosts().then((data) => {\r\n            setBlogPosts(data.data);\r\n            console.log(data.data)\r\n        });\r\n    }, []); */\r\n\r\n    const handleClick = (blogPostId: string) => {\r\n        navigate('../blog/' + blogPostId)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                Sortieren nach:\r\n                <button onClick={() => handleSortChange(\"createdAt\")}>\r\n                    Erstellungsdatum\r\n                </button>\r\n                <button onClick={() => handleSortChange(\"title\")}>\r\n                    Titel\r\n                </button>\r\n            </div>\r\n            {blopPosts.map((blogPost) => (\r\n                <div key={blogPost.id}>\r\n                    <Card sx={{ minWidth: 170, maxWidth: 340 }}>\r\n                        <CardContent>\r\n                            <Typography>\r\n                                Title: {blogPost.title}\r\n                            </Typography>\r\n                            <Typography>\r\n                                Text: {blogPost.text}\r\n                            </Typography>\r\n                            <Typography>\r\n                                By: {blogPost.user.firstName} {blogPost.user.lastName}\r\n                            </Typography>\r\n                            <Typography>\r\n                                Category: {blogPost.categories.map(item => item.name)}\r\n                            </Typography>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                onClick={() => handleClick(blogPost.id)}\r\n                                size='small'\r\n                                style={{ maxWidth: \"117px\" }}\r\n                            >\r\n                                GET SINGLE\r\n                            </Button>\r\n                        </CardContent>\r\n                    </Card>\r\n                </div>\r\n            ))}\r\n\r\n            {/* Buttons for Pagination */}\r\n            <div>\r\n                <button onClick={prevPage} disabled={currentPage === 1}>\r\n                    Vorherige Seite\r\n                </button>\r\n                <p>Seite {currentPage}</p>\r\n                <button onClick={nextPage} disabled={blopPosts.length < postsPerPage}>\r\n                    Nächste Seite\r\n                </button>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BlogPostsPublicPage;\r\n","import Card from '@mui/material/Card';\r\nimport CardActions from '@mui/material/CardActions';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Button from '@mui/material/Button';\r\nimport { useEffect, useState } from 'react';\r\nimport { User } from '../../../types/models/User.model';\r\nimport UserService from '../../../Services/UserService';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\n\r\nconst SingleUser = () => {\r\n  const navigate = useNavigate();\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const { userId } = useParams();\r\n\r\n  useEffect(() => {\r\n    if (userId) {\r\n      UserService.getUser(userId).then((res) => {\r\n        setUser(res);\r\n      }).catch(error => { console.log(error + \"Can't get User\") });\r\n    }\r\n  }, [userId]);\r\n\r\n  const handleAdd = () => {\r\n    navigate('../useredit/');\r\n  };\r\n\r\n  const handleEdit = (id: string) => {\r\n    navigate('../useredit/' + id);\r\n  };\r\n\r\n  const handleDelete = (id: string) => {\r\n    UserService.deleteUser(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {user && (\r\n        <div key={user.id}>\r\n          <Card sx={{ minWidth: 275 }}>\r\n            <CardContent>\r\n              {user.firstName} {user.lastName} {user.email}\r\n              <CardActions>\r\n                <Button\r\n                  size='small'\r\n                  color='primary'\r\n                  variant='contained'\r\n                  onClick={() => handleEdit(user.id)}\r\n                >\r\n                  Edit\r\n                </Button>\r\n                <Button\r\n                  size='small'\r\n                  color='error'\r\n                  variant='contained'\r\n                  onClick={() => handleDelete(user.id)}\r\n                >\r\n                  Delete\r\n                </Button>\r\n              </CardActions>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      )}\r\n      <Button\r\n        size='small'\r\n        color='success'\r\n        variant='contained'\r\n        onClick={handleAdd}\r\n      >\r\n        Add\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleUser;\r\n\r\n","import React from 'react';\r\nimport { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { BlogPost } from '../../../types/models/BlogPost.model';\r\nimport BlogPostService from '../../../Services/BlogPostService';\r\nimport { CardContent } from '@mui/joy';\r\nimport { Button, Card, CardActions } from '@mui/material';\r\n\r\nconst AdminTable = () => {\r\n    const navigate = useNavigate();\r\n    const [blopPosts, setBlogPosts] = useState<BlogPost[]>([]);\r\n\r\n    useEffect(() => {\r\n        BlogPostService.getAllBlogPosts().then((data) => {\r\n            setBlogPosts(data.data);\r\n        }).catch(error => { console.log(error + \"Can't get all BlogPosts\") });\r\n    }, []);\r\n\r\n    const handleAdd = () => {\r\n        navigate('../blogadd/');\r\n    };\r\n\r\n    const handleEdit = (blogPostId: string) => {\r\n        navigate('../adminedit/' + blogPostId);\r\n    };\r\n\r\n    const handleDelete = (blogPostId: string) => {\r\n        BlogPostService.deleteBlogPost(blogPostId);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {blopPosts.map((blogPost) => (\r\n                <div key={blogPost.id}>\r\n                    <Card sx={{ minWidth: 275 }}>\r\n                        <CardContent>\r\n                            {blogPost.title} {blogPost.text}\r\n                            <CardActions>\r\n                                <Button\r\n                                    size='small'\r\n                                    color='primary'\r\n                                    variant='contained'\r\n                                    onClick={() => handleEdit(blogPost.id)}\r\n                                >\r\n                                    Edit\r\n                                </Button>\r\n                                <Button\r\n                                    size='small'\r\n                                    color='error'\r\n                                    variant='contained'\r\n                                    onClick={() => {\r\n                                        handleDelete(blogPost.id)\r\n                                    }}\r\n                                >\r\n                                    Delete\r\n                                </Button>\r\n                            </CardActions>\r\n                        </CardContent>\r\n                    </Card>\r\n                </div>\r\n            ))}\r\n            <Button\r\n                size='small'\r\n                color='success'\r\n                variant='contained'\r\n                onClick={handleAdd}\r\n            >\r\n                Add\r\n            </Button>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AdminTable;\r\n","import React from 'react';\r\nimport { useEffect, useState } from 'react';\r\nimport { BlogPost } from '../../../types/models/BlogPost.model';\r\nimport BlogPostService from '../../../Services/BlogPostService';\r\nimport BlogPostForm from '../../molecules/BlogPostForm/BlogPostForm';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\n\r\nconst AdminPage = () => {\r\n  const navigate = useNavigate();\r\n  const { blogPostId } = useParams();\r\n  const [blogPost, setBlogPost] = useState<BlogPost>({\r\n    id: '',\r\n    title: '',\r\n    text: '',\r\n    user: { id: '', firstName: '', lastName: '', email: '', roles: [] },\r\n    categories: [],\r\n  });\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (blogPostId) {\r\n        BlogPostService.getBlogPost(blogPostId).then((res) => {\r\n          return setBlogPost(res);\r\n        }).catch(error => { console.log(error + \"Can't get BlogPost\") });\r\n      }\r\n    };\r\n  }, [blogPostId]);\r\n\r\n  const submitActionHandler = (values: BlogPost) => {\r\n    if (blogPostId !== undefined) {\r\n      BlogPostService.updateBlogPost(values).then(() => {\r\n        navigate('../blogs');\r\n      }).catch(error => { console.log(error + \"Can't navigate to blogs\") });\r\n    } else {\r\n      BlogPostService.addBlogPost(values).then(() => {\r\n        navigate('/blogs');\r\n      }).catch(error => { console.log(error + \"Can't navigate to blogs\") });\r\n    }\r\n  };\r\n\r\n  return <BlogPostForm blogPost={blogPost} submitActionHandler={submitActionHandler} />;\r\n\r\n};\r\n\r\nexport default AdminPage;\r\n","import { Route, Routes } from \"react-router-dom\";\r\nimport LoginPage from \"../components/pages/LoginPage/LoginPage\";\r\nimport PrivateRoute from \"./PrivateRoute\";\r\nimport HomePage from \"../components/pages/HomePage/HomePage\";\r\nimport UserTable from \"../components/pages/UserPage/UserTable\";\r\nimport UserPage from \"../components/pages/UserPage/UserPage\";\r\nimport BlogPostTable from \"../components/pages/BlogPostPage/BlogPostTable\";\r\nimport BlogPostPage from \"../components/pages/BlogPostPage/BlogPostPage\";\r\nimport UserHomePage from \"../components/pages/HomePage/UserHomePage\";\r\nimport BlogPostPublicPage from \"../components/pages/BlogPostPage/BlogPostPublicPage\";\r\nimport Register from \"../components/pages/RegisterPage/RegisterPage\";\r\nimport BlogPostsPublicPage from \"../components/pages/BlogPostPage/BlogPostsPublicPage\";\r\nimport SingleUser from \"../components/pages/UserPage/SingleUser\";\r\nimport authorities from \"../config/Authorities\";\r\nimport AdminTable from \"../components/pages/AdminPage/AdminTable\";\r\nimport AdminPage from \"../components/pages/AdminPage/AdminPage\";\r\n/**\r\n * Router component renders a route switch with all available pages\r\n */\r\n\r\nconst Router = () => {\r\n\r\n  const handleBackHome = () => {\r\n      window.location.href = \"/\";\r\n  };\r\n\r\n  //const { checkRole } = useContext(ActiveUserContext);\r\n\r\n  /** navigate to different \"home\"-locations depending on Role the user have */\r\n\r\n  return (\r\n    <Routes>\r\n      {/* Alle (default) User haben auf diese Endpunkte zugriff */}\r\n      <Route path={\"/\"} element={<HomePage />} />\r\n      <Route path={\"/login\"} element={<LoginPage />} />\r\n      <Route path={\"/register\"} element={<Register />} />\r\n      <Route path={\"/blogs\"} element={<BlogPostsPublicPage />} />\r\n      <Route path={\"/blog/:blogPostId\"} element={<BlogPostPublicPage />} />\r\n\r\n      {/* Nur eingeloggte User haben auf diese Endpunkte zugriff */}\r\n      <Route\r\n        path={\"/home\"}\r\n        element={\r\n          <PrivateRoute authorities={[\r\n            { id: authorities.DEFAULT, name: authorities.DEFAULT }\r\n          ]} element={<UserHomePage />}></PrivateRoute>\r\n        }\r\n      />\r\n      <Route\r\n        path={\"/dashboard/:userId\"}\r\n        element={\r\n          <PrivateRoute authorities={[\r\n            { id: authorities.BLOG_MODIFY_BY_ID, name: authorities.BLOG_MODIFY_BY_ID }\r\n          ]} element={<BlogPostTable />}></PrivateRoute>\r\n        }\r\n      />\r\n      <Route\r\n        path={\"/blogadd\"}\r\n        element={\r\n          <PrivateRoute authorities={[\r\n            { id: authorities.BLOG_CREATE, name: authorities.BLOG_CREATE }\r\n          ]} element={<BlogPostPage />}></PrivateRoute>\r\n        }\r\n      />\r\n      <Route\r\n        path={\"/blogedit/:blogPostId\"}\r\n        element={\r\n          <PrivateRoute authorities={[\r\n            { id: authorities.BLOG_MODIFY_BY_ID, name: authorities.BLOG_MODIFY_BY_ID },\r\n            { id: authorities.BLOG_DELETE_BY_ID, name: authorities.BLOG_DELETE_BY_ID }\r\n          ]} element={<BlogPostPage />}></PrivateRoute>\r\n        }\r\n      />\r\n      <Route\r\n        path={\"/user/:userId\"}\r\n        element={<PrivateRoute authorities={[\r\n          { id: authorities.USER_READ_BY_ID, name: authorities.USER_READ_BY_ID }\r\n        ]} element={<SingleUser />} />}\r\n      />\r\n      <Route\r\n        path=\"/useredit/:userId\"\r\n        element={\r\n          <PrivateRoute authorities={[\r\n            { id: authorities.USER_MODIFY_SELF, name: authorities.USER_MODIFY_SELF }\r\n          ]} element={<UserPage />}></PrivateRoute>\r\n        }\r\n      />\r\n\r\n      {/* Nur Admins haben auf diese Endpunkte zugriff */}\r\n      <Route\r\n        path={\"/admin\"}\r\n        element={\r\n          <PrivateRoute authorities={[\r\n            { id: authorities.USER_MODIFY, name: authorities.USER_MODIFY }\r\n          ]}\r\n            element={<AdminTable />}></PrivateRoute>\r\n        }\r\n      />\r\n      <Route\r\n        path={\"/adminedit/:blogPostId\"}\r\n        element={\r\n          <PrivateRoute authorities={[\r\n            { id: authorities.USER_MODIFY, name: authorities.USER_MODIFY }\r\n          ]}\r\n            element={<AdminPage />}></PrivateRoute>\r\n        }\r\n      />\r\n      <Route\r\n        path={\"/users\"}\r\n        element={<PrivateRoute authorities={[\r\n          { id: authorities.USER_MODIFY, name: authorities.USER_MODIFY }\r\n        ]} element={<UserTable />} />}\r\n      />\r\n      <Route\r\n        path=\"/useredit\"\r\n        element={\r\n          <PrivateRoute authorities={[\r\n            { id: authorities.USER_MODIFY, name: authorities.USER_MODIFY }\r\n          ]} element={<UserPage />}></PrivateRoute>\r\n        }\r\n      />\r\n\r\n      <Route path=\"*\" element={\r\n        <div>\r\n          <div>Not Found</div>\r\n          <button onClick={handleBackHome}>Back Home</button>\r\n        </div>\r\n      } />\r\n    </Routes>\r\n  );\r\n};\r\n\r\nexport default Router;\r\n","import React from 'react';\r\n\r\nimport './App.css';\r\n\r\nimport { ActiveUserContextProvider } from './Contexts/ActiveUserContext';\r\nimport Router from './Router/Router';\r\n\r\nfunction App() {\r\n  return (\r\n    <ActiveUserContextProvider>\r\n      <Router />\r\n    </ActiveUserContextProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nconst root = ReactDOM.createRoot(\r\n  document.getElementById('root') as HTMLElement\r\n);\r\nroot.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>\r\n);\r\n"],"sourceRoot":""}